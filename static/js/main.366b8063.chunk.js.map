{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","addNewItem","useState","error","setError","newItemText","setNewItemText","TextField","size","id","label","variant","className","value","onChange","event","currentTarget","onKeyPress","trim","charCode","helperText","Button","onClick","Todolist","setNewTodolistTitle","setNewTaskTitle","deleteTodolist","todolistId","title","tasks","deleteTask","filterTasks","addNewTask","setIsDone","filter","tasksElements","map","el","isDone","Checkbox","checked","taskId","inputProps","icon","checkedIcon","setNewItemTitleHandler","newTaskTitle","setNewTaskTitleHandler","IconButton","aria-label","fontSize","Paper","style","padding","elevation","textAlign","newTodolistTitle","Tooltip","EditableSpan","editMode","setEditMode","taskTitle","setTaskTitle","multiline","autoFocus","onBlur","wordWrap","onDoubleClick","App","TodolistID1","v1","TodolistID2","setTasks","todolists","setTodolist","TodolistId","undelTasks","filterValue","filtredTodolist","find","newTask","findTask","editTask","editTodolist","actions","name","AppBar","position","Toolbar","edge","color","sx","mr","Typography","component","flexGrow","Container","fixed","Grid","container","justifyContent","newTodolistId","newTodolist","spacing","tasksForTodolist","item","maxWidth","SpeedDial","ariaLabel","bottom","right","SpeedDialIcon","action","SpeedDialAction","tooltipTitle","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.366b8063.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\nimport Button from '@mui/material/Button';\r\nimport \"./App.css\";\r\n\r\nexport type AddItemPropsType = {\r\n    addNewItem: (title: string) => void\r\n}\r\nexport const AddItemForm = ({addNewItem}: AddItemPropsType) => {\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [newItemText, setNewItemText] = useState<string>(\"\")\r\n\r\n    const addNewText = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewItemText(event.currentTarget.value)\r\n    }\r\n\r\n    const addNewItemHandler = () => {\r\n        !newItemText.trim() ? setError(true) : addNewItem(newItemText)\r\n        setNewItemText(\"\")\r\n    }\r\n    const addNewItemWithEnter = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (newItemText.trim()) {\r\n            if (event.charCode === 13) {\r\n                addNewItem(newItemText)\r\n                setNewItemText(\"\")\r\n            }\r\n        } else setError(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField size={\"small\"} id=\"outlined-basic\" label=\"New task\" variant=\"outlined\" className={error ? \"error\" : \"\"}\r\n                       value={newItemText} onChange={addNewText}\r\n                       onKeyPress={addNewItemWithEnter} error={error} helperText={error ? \"title is required\" : \"\"}/>\r\n            <Button size={\"large\"} variant={\"contained\"} onClick={addNewItemHandler}>+</Button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {FilterType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport \"./App.css\";\r\n\r\nimport {Button, Checkbox, IconButton, Paper, Tooltip, TextField, Grid} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport BookmarkBorderIcon from \"@mui/icons-material/BookmarkBorder\";\r\nimport BookmarkIcon from \"@mui/icons-material/Bookmark\";\r\n\r\n\r\nexport type TodolistPropsType = {\r\n    setNewTodolistTitle: (newTodolistTitle: string, todolistId: string) => void\r\n    todolistId: string\r\n    filter: FilterType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    deleteTask: (taskId: string, TodolistId: string) => void\r\n    filterTasks: (filterValue: FilterType, id: string) => void\r\n    addNewTask: (title: string, TodolistId: string) => void\r\n    setIsDone: (taskId: string, TodolistId: string) => void\r\n    deleteTodolist: (todolistId: string) => void\r\n    setNewTaskTitle: (newTaskTitle: string, todolistId: string, taskId: string) => void\r\n}\r\n\r\nexport const Todolist = ({\r\n                             setNewTodolistTitle,\r\n                             setNewTaskTitle,\r\n                             deleteTodolist,\r\n                             todolistId,\r\n                             title,\r\n                             tasks,\r\n                             deleteTask,\r\n                             filterTasks,\r\n                             addNewTask,\r\n                             setIsDone,\r\n                             filter\r\n                         }: TodolistPropsType) => {\r\n    const tasksElements = tasks.map(el => {\r\n\r\n        const isDoneHandler = (taskId: string, TodolistId: string) => {\r\n            setIsDone(taskId, TodolistId)\r\n        }\r\n\r\n        const setNewTaskTitleHandler = (newTaskTitle: string, todolistId: string, taskId: string) => {\r\n            setNewTaskTitle(newTaskTitle, todolistId, taskId)\r\n        }\r\n        const label = {inputProps: {\"aria-label\": \"Checkbox demo\"}};\r\n        return <li className={el.isDone ? \"is-done\" : \"\"} key={el.id}>\r\n\r\n            <Checkbox checked={el.isDone}\r\n                      onChange={() => isDoneHandler(el.id, todolistId)}\r\n                      {...label}\r\n                      icon={<BookmarkBorderIcon/>}\r\n                      checkedIcon={<BookmarkIcon/>}\r\n            />\r\n            <EditableSpan setNewItemTitleHandler={(newTaskTitle) =>\r\n                setNewTaskTitleHandler(newTaskTitle, todolistId, el.id)}\r\n                          title={el.title}/>\r\n            <IconButton aria-label=\"delete\" size=\"small\">\r\n                <DeleteIcon onClick={() => deleteTask(el.id, todolistId)} fontSize=\"inherit\"/>\r\n            </IconButton>\r\n        </li>\r\n    })\r\n\r\n    const allBtn = () => filterTasks(\"all\", todolistId)\r\n    const actvBtn = () => filterTasks(\"active\", todolistId)\r\n    const complBtn = () => filterTasks(\"completed\", todolistId)\r\n\r\n    const addNewItem = (newItemText: string) => {\r\n        addNewTask(newItemText, todolistId)\r\n    }\r\n\r\n\r\n    return (\r\n            <Paper style={{padding: \"20px\"}} elevation={2}>\r\n            <h3 style={{textAlign: \"center\"}}><EditableSpan\r\n                setNewItemTitleHandler={(newTodolistTitle) => setNewTodolistTitle(newTodolistTitle, todolistId)}\r\n                title={title}/>\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\" size=\"small\">\r\n                        <DeleteIcon onClick={() => deleteTodolist(todolistId)} fontSize=\"inherit\"/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </h3>\r\n            <AddItemForm addNewItem={addNewItem}/>\r\n            <ul>\r\n                {tasksElements}\r\n            </ul>\r\n            <div>\r\n                <Button size={\"small\"} variant={filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        onClick={allBtn}>All</Button>\r\n                <Button size={\"small\"} variant={filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        onClick={actvBtn}>Active</Button>\r\n                <Button size={\"small\"} variant={filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        onClick={complBtn}>Completed</Button>\r\n            </div>\r\n            </Paper>\r\n    )\r\n}\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    setNewItemTitleHandler: (newTaskTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = ({title, setNewItemTitleHandler}: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [taskTitle, setTaskTitle] = useState<string>(title)\r\n    const correctTask = (event: ChangeEvent<HTMLInputElement>) => {\r\n        debugger\r\n        let newTaskTitle = event.currentTarget.value;\r\n        setTaskTitle(newTaskTitle)\r\n        setNewItemTitleHandler(newTaskTitle)\r\n    }\r\n    const onBlurHandler = () => setEditMode(false)\r\n    return (\r\n        <span>\r\n            {editMode && <TextField multiline variant={\"standard\"} onChange={correctTask} value={taskTitle} autoFocus onBlur={onBlurHandler}/>}\r\n            {editMode || <span style={{wordWrap: \"break-word\"}} onDoubleClick={() => setEditMode(true)}>{taskTitle}</span>}\r\n        </span>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\nimport \"./App.css\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Container, Grid, SpeedDial, SpeedDialAction, SpeedDialIcon} from \"@mui/material\";\r\nimport FileCopyIcon from \"@mui/icons-material/FileCopyOutlined\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\nimport PrintIcon from \"@mui/icons-material/Print\";\r\nimport ShareIcon from \"@mui/icons-material/Share\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type TasksType = { [key: string]: Array<TaskType> }\r\n\r\nfunction App() {\r\n\r\n    const TodolistID1 = v1();\r\n    const TodolistID2 = v1();\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [TodolistID1]: [{id: v1(), title: \"HTML\", isDone: true,},\r\n            {id: v1(), title: \"CSS\", isDone: false,},\r\n            {id: v1(), title: \"JS\", isDone: false,},],\r\n        [TodolistID2]: [{id: v1(), title: \"React\", isDone: true,},\r\n            {id: v1(), title: \"Material UI\", isDone: false,},\r\n            {id: v1(), title: \"Redux\", isDone: false,},],\r\n    })\r\n\r\n    let [todolists, setTodolist] = useState<Array<TodolistType>>([\r\n        {id: TodolistID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: TodolistID2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n\r\n    const deleteTask = (taskId: string, TodolistId: string) => {\r\n        debugger\r\n        const undelTasks = tasks[TodolistId].filter((el) => el.id !== taskId)\r\n        setTasks({...tasks, [TodolistId]: undelTasks})\r\n    }\r\n\r\n    const filterTasks = (filterValue: FilterType, TodolistId: string) => {\r\n        debugger\r\n        let filtredTodolist = todolists.find((el) => el.id === TodolistId);\r\n        if (filtredTodolist) filtredTodolist.filter = filterValue;\r\n        setTodolist([...todolists]);\r\n    }\r\n\r\n    const addNewTask = (title: string, TodolistId: string) => {\r\n        debugger\r\n        const newTask = {id: v1(), title: title, isDone: false,}\r\n        tasks[TodolistId] = [newTask, ...tasks[TodolistId]]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const setIsDone = (taskId: string, TodolistId: string) => {\r\n        debugger\r\n        const findTask = tasks[TodolistId].find(el => el.id === taskId)\r\n        if (findTask) {\r\n            findTask.isDone = !findTask.isDone\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const deleteTodolist = (TodolistId: string) => {\r\n        debugger\r\n        setTodolist(todolists.filter((el) => el.id !== TodolistId))\r\n    }\r\n\r\n    const addNewTodolist = (title: string) => {\r\n        debugger\r\n        const newTodolistId = v1();\r\n        const newTodolist: TodolistType = {id: newTodolistId, title: title, filter: \"all\"}\r\n        setTodolist([...todolists, newTodolist])\r\n        setTasks({...tasks, [newTodolistId]: []})\r\n    }\r\n\r\n    const setNewTaskTitle = (newTaskTitle: string, todolistId: string, taskId: string) => {\r\n        debugger\r\n        if (taskId !== todolistId) {\r\n            let editTask = tasks[todolistId].find((el) => el.id === taskId)\r\n            if (editTask) editTask.title = newTaskTitle;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    const setNewTodolistTitle = (newTodolistTitle: string, todolistId: string) => {\r\n        debugger\r\n        let editTodolist = todolists.find(el => el.id === todolistId)\r\n        if (editTodolist) editTodolist.title = newTodolistTitle;\r\n        setTodolist([...todolists])\r\n    }\r\n\r\n    const actions = [\r\n        {icon: <FileCopyIcon/>, name: \"Copy\"},\r\n        {icon: <SaveIcon/>, name: \"Save\"},\r\n        {icon: <PrintIcon/>, name: \"Print\"},\r\n        {icon: <ShareIcon/>, name: \"Share\"},\r\n    ];\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        *TODOLIST*\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\", justifyContent: \"center\"}}>\r\n                    <AddItemForm addNewItem={addNewTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3} style={{justifyContent: \"center\"}}>\r\n                    {todolists.map((el) => {\r\n                        debugger\r\n                        let tasksForTodolist = tasks[el.id]\r\n                        if (el.filter === \"active\") {\r\n                            tasksForTodolist = tasks[el.id].filter(el => el.isDone === false)\r\n                        }\r\n                        if (el.filter === \"completed\") {\r\n                            tasksForTodolist = tasks[el.id].filter(el => el.isDone === true)\r\n                        }\r\n                        return <Grid item maxWidth={\"400px\"} key={el.id}>\r\n                            <Todolist setNewTodolistTitle={setNewTodolistTitle}\r\n                                      setNewTaskTitle={setNewTaskTitle}\r\n                                      deleteTodolist={deleteTodolist}\r\n                                      todolistId={el.id} filter={el.filter} title={el.title}\r\n                                      tasks={tasksForTodolist}\r\n                                      deleteTask={deleteTask}\r\n                                      filterTasks={filterTasks} addNewTask={addNewTask} setIsDone={setIsDone}/>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n            <SpeedDial\r\n                ariaLabel=\"SpeedDial basic example\"\r\n                sx={{position: \"absolute\", bottom: 16, right: 16}}\r\n                icon={<SpeedDialIcon/>}\r\n            >\r\n                {actions.map((action) => (\r\n                    <SpeedDialAction\r\n                        key={action.name}\r\n                        icon={action.icon}\r\n                        tooltipTitle={action.name}\r\n                    />\r\n                ))}\r\n            </SpeedDial>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}